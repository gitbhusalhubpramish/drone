#include <Wire.h>
#include <MPU6050.h>
#include <ServoTimer2.h>

// ===== DRONE MOTOR LAYOUT =====
// m1 - Front Left
// m2 - Front Right
// m3 - Back Left
// m4 - Back Right

#define lsig 2
#define rsig 4
#define fsig 7
#define bsig 8

ServoTimer2 m1, m2, m3, m4;
const int dm1 = 9;
const int dm2 = 10;
const int dm3 = 11;
const int dm4 = 6;

// ===== MPU VARIABLES =====
MPU6050 mpu;
float pitch = 0, roll = 0;
float gyroPitch = 0, gyroRoll = 0;
float Kp = 2.0;
unsigned long lastTime = 0;

// ===== RC INPUTS =====
volatile uint16_t rcValue[4] = {1500, 1500, 1500, 1500};
volatile uint32_t rcStart[4];
const uint8_t rcPins[4] = {rsig, lsig, fsig, bsig};

// ===== SPEEDS =====
int hi = 2000, lo = 1000, mid = 1500;

// ===== INTERRUPT HANDLER =====
void rcISR0() {
  if (digitalRead(rsig))
    rcStart[0] = micros();
  else
    rcValue[0] = micros() - rcStart[0];
}
void rcISR1() {
  if (digitalRead(lsig))
    rcStart[1] = micros();
  else
    rcValue[1] = micros() - rcStart[1];
}
void rcISR2() {
  if (digitalRead(fsig))
    rcStart[2] = micros();
  else
    rcValue[2] = micros() - rcStart[2];
}
void rcISR3() {
  if (digitalRead(bsig))
    rcStart[3] = micros();
  else
    rcValue[3] = micros() - rcStart[3];
}

void setup() {
  Serial.begin(115200);
  Wire.begin();

  mpu.initialize();
  if (!mpu.testConnection()) {
    Serial.println("MPU6050 connection failed!");
    while (1);
  }
  Serial.println("MPU6050 ready.");

  m1.attach(dm1);
  m2.attach(dm2);
  m3.attach(dm3);
  m4.attach(dm4);

  // Arm ESCs
  m1.write(1000);
  m2.write(1000);
  m3.write(1000);
  m4.write(1000);
  delay(2000);

  // Attach interrupts for RC
  attachInterrupt(digitalPinToInterrupt(rsig), rcISR0, CHANGE);
  attachInterrupt(digitalPinToInterrupt(lsig), rcISR1, CHANGE);
  attachInterrupt(digitalPinToInterrupt(fsig), rcISR2, CHANGE);
  attachInterrupt(digitalPinToInterrupt(bsig), rcISR3, CHANGE);

  lastTime = micros();
}

void loop() {
  // ===== TIME STEP =====
  unsigned long now = micros();
  float dt = (now - lastTime) / 1000000.0;
  lastTime = now;

  // ===== RC BUTTON STATES =====
  bool rclk = rcValue[0] > 1700;
  bool lclk = rcValue[1] > 1700;
  bool fclk = rcValue[2] > 1700;
  bool bclk = rcValue[3] > 1700;

  // ===== MPU READ =====
  int16_t ax, ay, az, gx, gy, gz;
  mpu.getMotion6(&ax, &ay, &az, &gx, &gy, &gz);

  float accPitch = atan2(ax, sqrt(ay * ay + az * az)) * 180 / PI;
  float accRoll  = atan2(ay, sqrt(ax * ax + az * az)) * 180 / PI;

  float gyroRateX = gx / 131.0;
  float gyroRateY = gy / 131.0;

  gyroPitch += gyroRateY * dt;
  gyroRoll  -= gyroRateX * dt;

  pitch = 0.98 * gyroPitch + 0.02 * accPitch;
  roll  = 0.98 * gyroRoll  + 0.02 * accRoll;

  // ===== BASE SPEEDS =====
  int base1 = mid, base2 = mid, base3 = mid, base4 = mid;

  if (rclk && lclk) {
    base1 = base2 = base3 = base4 = lo;
  } else if (fclk && bclk) {
    base1 = base2 = base3 = base4 = hi;
  } else if (fclk && rclk) {
    base1 = base3 = mid;
    base2 = base4 = lo;
  } else if (bclk && lclk) {
    base1 = base3 = lo;
    base2 = base4 = mid;
  } else if (rclk) {
    base2 = base4 = lo;
    base1 = base3 = mid;
  } else if (lclk) {
    base1 = base3 = lo;
    base2 = base4 = mid;
  } else if (fclk) {
    base1 = base2 = lo;
    base3 = base4 = mid;
  } else if (bclk) {
    base1 = base2 = mid;
    base3 = base4 = lo;
  }

  // ===== CORRECTIONS =====
  int pitchCorrection = Kp * pitch;
  int rollCorrection  = Kp * roll;

  int sp1 = constrain(base1 - pitchCorrection + rollCorrection, 1000, 2000);
  int sp2 = constrain(base2 - pitchCorrection - rollCorrection, 1000, 2000);
  int sp3 = constrain(base3 + pitchCorrection + rollCorrection, 1000, 2000);
  int sp4 = constrain(base4 + pitchCorrection - rollCorrection, 1000, 2000);

  // ===== SEND TO MOTORS (50Hz) =====
  static unsigned long lastMotorUpdate = 0;
  if (now - lastMotorUpdate >= 20000) { // every 20 ms
    lastMotorUpdate = now;
    m1.write(sp1);
    m2.write(sp2);
    m3.write(sp3);
    m4.write(sp4);
  }

  // ===== DEBUG =====
  Serial.print("Pitch: "); Serial.print(pitch);
  Serial.print(" | Roll: "); Serial.print(roll);
  Serial.print(" | Motors: ");
  Serial.print(sp1); Serial.print(", ");
  Serial.print(sp2); Serial.print(", ");
  Serial.print(sp3); Serial.print(", ");
  Serial.println(sp4);
}
